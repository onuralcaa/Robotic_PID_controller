
ROBOTIC_PID_CONTROLLER_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002694  08002694  00012694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026a4  080026a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026ac  080026ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026b0  080026b0  000126b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080026c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080026c0  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094ab  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001647  00000000  00000000  000294e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002ab30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002b510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020987  00000000  00000000  0002be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b07b  00000000  00000000  0004c7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca2c3  00000000  00000000  0005783a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121afd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000293c  00000000  00000000  00121b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800267c 	.word	0x0800267c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800267c 	.word	0x0800267c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Servo2_Angle>:

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, angle1);
}

void Servo2_Angle(int angle2)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if(angle2 < 0)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b00      	cmp	r3, #0
 8000514:	da01      	bge.n	800051a <Servo2_Angle+0x12>
		angle2 = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
	if(angle2 > 90)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b5a      	cmp	r3, #90	; 0x5a
 800051e:	dd01      	ble.n	8000524 <Servo2_Angle+0x1c>
		angle2 = 90;
 8000520:	235a      	movs	r3, #90	; 0x5a
 8000522:	607b      	str	r3, [r7, #4]

	angle2 += 45; //offset değeri
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	332d      	adds	r3, #45	; 0x2d
 8000528:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, angle2);
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <Servo2_Angle+0x38>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000028 	.word	0x20000028

08000544 <Servo3_Angle>:

void Servo3_Angle(int angle3)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	if(angle3 < 0)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	da01      	bge.n	8000556 <Servo3_Angle+0x12>
		angle3 = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
	if(angle3 > 90)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b5a      	cmp	r3, #90	; 0x5a
 800055a:	dd01      	ble.n	8000560 <Servo3_Angle+0x1c>
		angle3 = 90;
 800055c:	235a      	movs	r3, #90	; 0x5a
 800055e:	607b      	str	r3, [r7, #4]

	angle3 += 45; //offset değeri
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	332d      	adds	r3, #45	; 0x2d
 8000564:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, angle3);
 8000566:	4b05      	ldr	r3, [pc, #20]	; (800057c <Servo3_Angle+0x38>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000028 	.word	0x20000028

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fa6b 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f83d 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f94f 	bl	8000830 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000592:	f000 f8a5 	bl	80006e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000596:	2100      	movs	r1, #0
 8000598:	481a      	ldr	r0, [pc, #104]	; (8000604 <main+0x84>)
 800059a:	f001 fb75 	bl	8001c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800059e:	2104      	movs	r1, #4
 80005a0:	4818      	ldr	r0, [pc, #96]	; (8000604 <main+0x84>)
 80005a2:	f001 fb71 	bl	8001c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80005a6:	2108      	movs	r1, #8
 80005a8:	4816      	ldr	r0, [pc, #88]	; (8000604 <main+0x84>)
 80005aa:	f001 fb6d 	bl	8001c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80005ae:	210c      	movs	r1, #12
 80005b0:	4814      	ldr	r0, [pc, #80]	; (8000604 <main+0x84>)
 80005b2:	f001 fb69 	bl	8001c88 <HAL_TIM_PWM_Start>

    /* USER CODE BEGIN 3 */



	  for(int i=0 ; i <= 90; i++ )
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	e01e      	b.n	80005fa <main+0x7a>
	  {
		  //Servo1_Angle(i);
		  Servo2_Angle(i);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff ffa3 	bl	8000508 <Servo2_Angle>
		  Servo3_Angle(i);
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff ffbe 	bl	8000544 <Servo3_Angle>
		  //Servo4_Angle(i);


		  HAL_Delay(55);
 80005c8:	2037      	movs	r0, #55	; 0x37
 80005ca:	f000 fabb 	bl	8000b44 <HAL_Delay>

		  if(i==90)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b5a      	cmp	r3, #90	; 0x5a
 80005d2:	d10f      	bne.n	80005f4 <main+0x74>
		  {
			  while(i>0)
 80005d4:	e00b      	b.n	80005ee <main+0x6e>
			  {
				  //Servo1_Angle(i);
				  Servo2_Angle(i);
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ff96 	bl	8000508 <Servo2_Angle>
				  Servo3_Angle(i);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff ffb1 	bl	8000544 <Servo3_Angle>
				  //Servo4_Angle(i);


				  i--;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	3b01      	subs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]

				  HAL_Delay(55);
 80005e8:	2037      	movs	r0, #55	; 0x37
 80005ea:	f000 faab 	bl	8000b44 <HAL_Delay>
			  while(i>0)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	dcf0      	bgt.n	80005d6 <main+0x56>
	  for(int i=0 ; i <= 90; i++ )
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3301      	adds	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b5a      	cmp	r3, #90	; 0x5a
 80005fe:	dddd      	ble.n	80005bc <main+0x3c>
 8000600:	e7d9      	b.n	80005b6 <main+0x36>
 8000602:	bf00      	nop
 8000604:	20000028 	.word	0x20000028

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2234      	movs	r2, #52	; 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 f828 	bl	800266c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <SystemClock_Config+0xd0>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a28      	ldr	r2, [pc, #160]	; (80006d8 <SystemClock_Config+0xd0>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <SystemClock_Config+0xd0>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemClock_Config+0xd4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xd4>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xd4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000670:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000680:	2340      	movs	r3, #64	; 0x40
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4618      	mov	r0, r3
 8000696:	f001 f809 	bl	80016ac <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a0:	f000 f8ee 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2101      	movs	r1, #1
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fcde 	bl	8001080 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ca:	f000 f8d9 	bl	8000880 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b092      	sub	sp, #72	; 0x48
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]
 8000702:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2220      	movs	r2, #32
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f001 ffae 	bl	800266c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000710:	4b45      	ldr	r3, [pc, #276]	; (8000828 <MX_TIM1_Init+0x148>)
 8000712:	4a46      	ldr	r2, [pc, #280]	; (800082c <MX_TIM1_Init+0x14c>)
 8000714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 355;
 8000716:	4b44      	ldr	r3, [pc, #272]	; (8000828 <MX_TIM1_Init+0x148>)
 8000718:	f240 1263 	movw	r2, #355	; 0x163
 800071c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b42      	ldr	r3, [pc, #264]	; (8000828 <MX_TIM1_Init+0x148>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1799;
 8000724:	4b40      	ldr	r3, [pc, #256]	; (8000828 <MX_TIM1_Init+0x148>)
 8000726:	f240 7207 	movw	r2, #1799	; 0x707
 800072a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b3e      	ldr	r3, [pc, #248]	; (8000828 <MX_TIM1_Init+0x148>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000732:	4b3d      	ldr	r3, [pc, #244]	; (8000828 <MX_TIM1_Init+0x148>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000738:	4b3b      	ldr	r3, [pc, #236]	; (8000828 <MX_TIM1_Init+0x148>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800073e:	483a      	ldr	r0, [pc, #232]	; (8000828 <MX_TIM1_Init+0x148>)
 8000740:	f001 fa52 	bl	8001be8 <HAL_TIM_PWM_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800074a:	f000 f899 	bl	8000880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074e:	2300      	movs	r3, #0
 8000750:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000756:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800075a:	4619      	mov	r1, r3
 800075c:	4832      	ldr	r0, [pc, #200]	; (8000828 <MX_TIM1_Init+0x148>)
 800075e:	f001 fe93 	bl	8002488 <HAL_TIMEx_MasterConfigSynchronization>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000768:	f000 f88a 	bl	8000880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076c:	2360      	movs	r3, #96	; 0x60
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000774:	2300      	movs	r3, #0
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000778:	2300      	movs	r3, #0
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000784:	2300      	movs	r3, #0
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	4825      	ldr	r0, [pc, #148]	; (8000828 <MX_TIM1_Init+0x148>)
 8000792:	f001 fb41 	bl	8001e18 <HAL_TIM_PWM_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800079c:	f000 f870 	bl	8000880 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	2204      	movs	r2, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	481f      	ldr	r0, [pc, #124]	; (8000828 <MX_TIM1_Init+0x148>)
 80007aa:	f001 fb35 	bl	8001e18 <HAL_TIM_PWM_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80007b4:	f000 f864 	bl	8000880 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007bc:	2208      	movs	r2, #8
 80007be:	4619      	mov	r1, r3
 80007c0:	4819      	ldr	r0, [pc, #100]	; (8000828 <MX_TIM1_Init+0x148>)
 80007c2:	f001 fb29 	bl	8001e18 <HAL_TIM_PWM_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80007cc:	f000 f858 	bl	8000880 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d4:	220c      	movs	r2, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <MX_TIM1_Init+0x148>)
 80007da:	f001 fb1d 	bl	8001e18 <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80007e4:	f000 f84c 	bl	8000880 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4619      	mov	r1, r3
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <MX_TIM1_Init+0x148>)
 800080c:	f001 feb8 	bl	8002580 <HAL_TIMEx_ConfigBreakDeadTime>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000816:	f000 f833 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <MX_TIM1_Init+0x148>)
 800081c:	f000 f880 	bl	8000920 <HAL_TIM_MspPostInit>

}
 8000820:	bf00      	nop
 8000822:	3748      	adds	r7, #72	; 0x48
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000028 	.word	0x20000028
 800082c:	40010000 	.word	0x40010000

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_GPIO_Init+0x4c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a0f      	ldr	r2, [pc, #60]	; (800087c <MX_GPIO_Init+0x4c>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_GPIO_Init+0x4c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_GPIO_Init+0x4c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <MX_GPIO_Init+0x4c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_GPIO_Init+0x4c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <HAL_MspInit+0x4c>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	; 0x44
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <HAL_TIM_PWM_MspInit+0x3c>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d10d      	bne.n	800090a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_TIM_PWM_MspInit+0x40>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <HAL_TIM_PWM_MspInit+0x40>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_TIM_PWM_MspInit+0x40>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40010000 	.word	0x40010000
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a12      	ldr	r2, [pc, #72]	; (8000988 <HAL_TIM_MspPostInit+0x68>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d11e      	bne.n	8000980 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_TIM_MspPostInit+0x6c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a10      	ldr	r2, [pc, #64]	; (800098c <HAL_TIM_MspPostInit+0x6c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_TIM_MspPostInit+0x6c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800095e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000962:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000970:	2301      	movs	r3, #1
 8000972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <HAL_TIM_MspPostInit+0x70>)
 800097c:	f000 f9ec 	bl	8000d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000980:	bf00      	nop
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40010000 	.word	0x40010000
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <NMI_Handler+0x4>

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f890 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a12:	490e      	ldr	r1, [pc, #56]	; (8000a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a28:	4c0b      	ldr	r4, [pc, #44]	; (8000a58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a36:	f7ff ffd7 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f001 fdf3 	bl	8002624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3e:	f7ff fd9f 	bl	8000580 <main>
  bx  lr    
 8000a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a50:	080026b4 	.word	0x080026b4
  ldr r2, =_sbss
 8000a54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a58:	20000074 	.word	0x20000074

08000a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <HAL_Init+0x40>)
 8000a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_Init+0x40>)
 8000a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x40>)
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f931 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	200f      	movs	r0, #15
 8000a90:	f000 f808 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff fefa 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023c00 	.word	0x40023c00

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x54>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f93b 	bl	8000d3e <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 f911 	bl	8000d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x5c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000070 	.word	0x20000070

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000070 	.word	0x20000070

08000b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b4c:	f7ff ffee 	bl	8000b2c <HAL_GetTick>
 8000b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	d005      	beq.n	8000b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_Delay+0x44>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b6a:	bf00      	nop
 8000b6c:	f7ff ffde 	bl	8000b2c <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d8f7      	bhi.n	8000b6c <HAL_Delay+0x28>
  {
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cbc:	d301      	bcc.n	8000cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00f      	b.n	8000ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <SysTick_Config+0x40>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cca:	210f      	movs	r1, #15
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f7ff ff8e 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SysTick_Config+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SysTick_Config+0x40>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff47 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff5c 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff8e 	bl	8000c44 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5d 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffb0 	bl	8000cac <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	e165      	b.n	8001040 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f040 8154 	bne.w	800103a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d005      	beq.n	8000daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d130      	bne.n	8000e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	f003 0201 	and.w	r2, r3, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d017      	beq.n	8000e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d123      	bne.n	8000e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	69b9      	ldr	r1, [r7, #24]
 8000e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0203 	and.w	r2, r3, #3
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80ae 	beq.w	800103a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b5d      	ldr	r3, [pc, #372]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a5c      	ldr	r2, [pc, #368]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b5a      	ldr	r3, [pc, #360]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efa:	4a58      	ldr	r2, [pc, #352]	; (800105c <HAL_GPIO_Init+0x304>)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4f      	ldr	r2, [pc, #316]	; (8001060 <HAL_GPIO_Init+0x308>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d025      	beq.n	8000f72 <HAL_GPIO_Init+0x21a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4e      	ldr	r2, [pc, #312]	; (8001064 <HAL_GPIO_Init+0x30c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d01f      	beq.n	8000f6e <HAL_GPIO_Init+0x216>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4d      	ldr	r2, [pc, #308]	; (8001068 <HAL_GPIO_Init+0x310>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d019      	beq.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4c      	ldr	r2, [pc, #304]	; (800106c <HAL_GPIO_Init+0x314>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0x20e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4b      	ldr	r2, [pc, #300]	; (8001070 <HAL_GPIO_Init+0x318>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00d      	beq.n	8000f62 <HAL_GPIO_Init+0x20a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4a      	ldr	r2, [pc, #296]	; (8001074 <HAL_GPIO_Init+0x31c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x206>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a49      	ldr	r2, [pc, #292]	; (8001078 <HAL_GPIO_Init+0x320>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_GPIO_Init+0x202>
 8000f56:	2306      	movs	r3, #6
 8000f58:	e00c      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e00a      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f5e:	2305      	movs	r3, #5
 8000f60:	e008      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f62:	2304      	movs	r3, #4
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f66:	2303      	movs	r3, #3
 8000f68:	e004      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e002      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f72:	2300      	movs	r3, #0
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	f002 0203 	and.w	r2, r2, #3
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	4093      	lsls	r3, r2
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f84:	4935      	ldr	r1, [pc, #212]	; (800105c <HAL_GPIO_Init+0x304>)
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f92:	4b3a      	ldr	r3, [pc, #232]	; (800107c <HAL_GPIO_Init+0x324>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb6:	4a31      	ldr	r2, [pc, #196]	; (800107c <HAL_GPIO_Init+0x324>)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <HAL_GPIO_Init+0x324>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe0:	4a26      	ldr	r2, [pc, #152]	; (800107c <HAL_GPIO_Init+0x324>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <HAL_GPIO_Init+0x324>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100a:	4a1c      	ldr	r2, [pc, #112]	; (800107c <HAL_GPIO_Init+0x324>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_GPIO_Init+0x324>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001034:	4a11      	ldr	r2, [pc, #68]	; (800107c <HAL_GPIO_Init+0x324>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3301      	adds	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	2b0f      	cmp	r3, #15
 8001044:	f67f ae96 	bls.w	8000d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40013800 	.word	0x40013800
 8001060:	40020000 	.word	0x40020000
 8001064:	40020400 	.word	0x40020400
 8001068:	40020800 	.word	0x40020800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40021000 	.word	0x40021000
 8001074:	40021400 	.word	0x40021400
 8001078:	40021800 	.word	0x40021800
 800107c:	40013c00 	.word	0x40013c00

08001080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e0cc      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001094:	4b68      	ldr	r3, [pc, #416]	; (8001238 <HAL_RCC_ClockConfig+0x1b8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d90c      	bls.n	80010bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a2:	4b65      	ldr	r3, [pc, #404]	; (8001238 <HAL_RCC_ClockConfig+0x1b8>)
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010aa:	4b63      	ldr	r3, [pc, #396]	; (8001238 <HAL_RCC_ClockConfig+0x1b8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d001      	beq.n	80010bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e0b8      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d020      	beq.n	800110a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010d4:	4b59      	ldr	r3, [pc, #356]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	4a58      	ldr	r2, [pc, #352]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80010da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010ec:	4b53      	ldr	r3, [pc, #332]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	4a52      	ldr	r2, [pc, #328]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80010f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f8:	4b50      	ldr	r3, [pc, #320]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	494d      	ldr	r1, [pc, #308]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	4313      	orrs	r3, r2
 8001108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d044      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d107      	bne.n	800112e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	4b47      	ldr	r3, [pc, #284]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d119      	bne.n	800115e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e07f      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d003      	beq.n	800113e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800113a:	2b03      	cmp	r3, #3
 800113c:	d107      	bne.n	800114e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800113e:	4b3f      	ldr	r3, [pc, #252]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d109      	bne.n	800115e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e06f      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114e:	4b3b      	ldr	r3, [pc, #236]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e067      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f023 0203 	bic.w	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4934      	ldr	r1, [pc, #208]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 800116c:	4313      	orrs	r3, r2
 800116e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001170:	f7ff fcdc 	bl	8000b2c <HAL_GetTick>
 8001174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001176:	e00a      	b.n	800118e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001178:	f7ff fcd8 	bl	8000b2c <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	f241 3288 	movw	r2, #5000	; 0x1388
 8001186:	4293      	cmp	r3, r2
 8001188:	d901      	bls.n	800118e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e04f      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118e:	4b2b      	ldr	r3, [pc, #172]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 020c 	and.w	r2, r3, #12
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	429a      	cmp	r2, r3
 800119e:	d1eb      	bne.n	8001178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011a0:	4b25      	ldr	r3, [pc, #148]	; (8001238 <HAL_RCC_ClockConfig+0x1b8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d20c      	bcs.n	80011c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ae:	4b22      	ldr	r3, [pc, #136]	; (8001238 <HAL_RCC_ClockConfig+0x1b8>)
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_RCC_ClockConfig+0x1b8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e032      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d008      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	4916      	ldr	r1, [pc, #88]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d009      	beq.n	8001206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	490e      	ldr	r1, [pc, #56]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001202:	4313      	orrs	r3, r2
 8001204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001206:	f000 f821 	bl	800124c <HAL_RCC_GetSysClockFreq>
 800120a:	4602      	mov	r2, r0
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	490a      	ldr	r1, [pc, #40]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	5ccb      	ldrb	r3, [r1, r3]
 800121a:	fa22 f303 	lsr.w	r3, r2, r3
 800121e:	4a09      	ldr	r2, [pc, #36]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_RCC_ClockConfig+0x1c8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fc3c 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023c00 	.word	0x40023c00
 800123c:	40023800 	.word	0x40023800
 8001240:	08002694 	.word	0x08002694
 8001244:	20000000 	.word	0x20000000
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800124c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001250:	b0ae      	sub	sp, #184	; 0xb8
 8001252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001272:	4bcb      	ldr	r3, [pc, #812]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b0c      	cmp	r3, #12
 800127c:	f200 8206 	bhi.w	800168c <HAL_RCC_GetSysClockFreq+0x440>
 8001280:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001286:	bf00      	nop
 8001288:	080012bd 	.word	0x080012bd
 800128c:	0800168d 	.word	0x0800168d
 8001290:	0800168d 	.word	0x0800168d
 8001294:	0800168d 	.word	0x0800168d
 8001298:	080012c5 	.word	0x080012c5
 800129c:	0800168d 	.word	0x0800168d
 80012a0:	0800168d 	.word	0x0800168d
 80012a4:	0800168d 	.word	0x0800168d
 80012a8:	080012cd 	.word	0x080012cd
 80012ac:	0800168d 	.word	0x0800168d
 80012b0:	0800168d 	.word	0x0800168d
 80012b4:	0800168d 	.word	0x0800168d
 80012b8:	080014bd 	.word	0x080014bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012bc:	4bb9      	ldr	r3, [pc, #740]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80012be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80012c2:	e1e7      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012c4:	4bb8      	ldr	r3, [pc, #736]	; (80015a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80012c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80012ca:	e1e3      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012cc:	4bb4      	ldr	r3, [pc, #720]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012d8:	4bb1      	ldr	r3, [pc, #708]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d071      	beq.n	80013c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012e4:	4bae      	ldr	r3, [pc, #696]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	099b      	lsrs	r3, r3, #6
 80012ea:	2200      	movs	r2, #0
 80012ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80012f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80012f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800130a:	4622      	mov	r2, r4
 800130c:	462b      	mov	r3, r5
 800130e:	f04f 0000 	mov.w	r0, #0
 8001312:	f04f 0100 	mov.w	r1, #0
 8001316:	0159      	lsls	r1, r3, #5
 8001318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800131c:	0150      	lsls	r0, r2, #5
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4621      	mov	r1, r4
 8001324:	1a51      	subs	r1, r2, r1
 8001326:	6439      	str	r1, [r7, #64]	; 0x40
 8001328:	4629      	mov	r1, r5
 800132a:	eb63 0301 	sbc.w	r3, r3, r1
 800132e:	647b      	str	r3, [r7, #68]	; 0x44
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800133c:	4649      	mov	r1, r9
 800133e:	018b      	lsls	r3, r1, #6
 8001340:	4641      	mov	r1, r8
 8001342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001346:	4641      	mov	r1, r8
 8001348:	018a      	lsls	r2, r1, #6
 800134a:	4641      	mov	r1, r8
 800134c:	1a51      	subs	r1, r2, r1
 800134e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001350:	4649      	mov	r1, r9
 8001352:	eb63 0301 	sbc.w	r3, r3, r1
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001364:	4649      	mov	r1, r9
 8001366:	00cb      	lsls	r3, r1, #3
 8001368:	4641      	mov	r1, r8
 800136a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800136e:	4641      	mov	r1, r8
 8001370:	00ca      	lsls	r2, r1, #3
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	4603      	mov	r3, r0
 8001378:	4622      	mov	r2, r4
 800137a:	189b      	adds	r3, r3, r2
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
 800137e:	462b      	mov	r3, r5
 8001380:	460a      	mov	r2, r1
 8001382:	eb42 0303 	adc.w	r3, r2, r3
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001394:	4629      	mov	r1, r5
 8001396:	024b      	lsls	r3, r1, #9
 8001398:	4621      	mov	r1, r4
 800139a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800139e:	4621      	mov	r1, r4
 80013a0:	024a      	lsls	r2, r1, #9
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013aa:	2200      	movs	r2, #0
 80013ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80013b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80013b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80013b8:	f7fe ff24 	bl	8000204 <__aeabi_uldivmod>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4613      	mov	r3, r2
 80013c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80013c6:	e067      	b.n	8001498 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c8:	4b75      	ldr	r3, [pc, #468]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80013d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80013d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80013e2:	2300      	movs	r3, #0
 80013e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80013e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80013ea:	4622      	mov	r2, r4
 80013ec:	462b      	mov	r3, r5
 80013ee:	f04f 0000 	mov.w	r0, #0
 80013f2:	f04f 0100 	mov.w	r1, #0
 80013f6:	0159      	lsls	r1, r3, #5
 80013f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013fc:	0150      	lsls	r0, r2, #5
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4621      	mov	r1, r4
 8001404:	1a51      	subs	r1, r2, r1
 8001406:	62b9      	str	r1, [r7, #40]	; 0x28
 8001408:	4629      	mov	r1, r5
 800140a:	eb63 0301 	sbc.w	r3, r3, r1
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800141c:	4649      	mov	r1, r9
 800141e:	018b      	lsls	r3, r1, #6
 8001420:	4641      	mov	r1, r8
 8001422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001426:	4641      	mov	r1, r8
 8001428:	018a      	lsls	r2, r1, #6
 800142a:	4641      	mov	r1, r8
 800142c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001430:	4649      	mov	r1, r9
 8001432:	eb63 0b01 	sbc.w	fp, r3, r1
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001442:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001446:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800144a:	4692      	mov	sl, r2
 800144c:	469b      	mov	fp, r3
 800144e:	4623      	mov	r3, r4
 8001450:	eb1a 0303 	adds.w	r3, sl, r3
 8001454:	623b      	str	r3, [r7, #32]
 8001456:	462b      	mov	r3, r5
 8001458:	eb4b 0303 	adc.w	r3, fp, r3
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800146a:	4629      	mov	r1, r5
 800146c:	028b      	lsls	r3, r1, #10
 800146e:	4621      	mov	r1, r4
 8001470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001474:	4621      	mov	r1, r4
 8001476:	028a      	lsls	r2, r1, #10
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001480:	2200      	movs	r2, #0
 8001482:	673b      	str	r3, [r7, #112]	; 0x70
 8001484:	677a      	str	r2, [r7, #116]	; 0x74
 8001486:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800148a:	f7fe febb 	bl	8000204 <__aeabi_uldivmod>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4613      	mov	r3, r2
 8001494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001498:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	0c1b      	lsrs	r3, r3, #16
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	3301      	adds	r3, #1
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80014aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80014ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014ba:	e0eb      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014bc:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d06b      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d4:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	099b      	lsrs	r3, r3, #6
 80014da:	2200      	movs	r2, #0
 80014dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80014de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80014e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014e6:	663b      	str	r3, [r7, #96]	; 0x60
 80014e8:	2300      	movs	r3, #0
 80014ea:	667b      	str	r3, [r7, #100]	; 0x64
 80014ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80014f0:	4622      	mov	r2, r4
 80014f2:	462b      	mov	r3, r5
 80014f4:	f04f 0000 	mov.w	r0, #0
 80014f8:	f04f 0100 	mov.w	r1, #0
 80014fc:	0159      	lsls	r1, r3, #5
 80014fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001502:	0150      	lsls	r0, r2, #5
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4621      	mov	r1, r4
 800150a:	1a51      	subs	r1, r2, r1
 800150c:	61b9      	str	r1, [r7, #24]
 800150e:	4629      	mov	r1, r5
 8001510:	eb63 0301 	sbc.w	r3, r3, r1
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001522:	4659      	mov	r1, fp
 8001524:	018b      	lsls	r3, r1, #6
 8001526:	4651      	mov	r1, sl
 8001528:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800152c:	4651      	mov	r1, sl
 800152e:	018a      	lsls	r2, r1, #6
 8001530:	4651      	mov	r1, sl
 8001532:	ebb2 0801 	subs.w	r8, r2, r1
 8001536:	4659      	mov	r1, fp
 8001538:	eb63 0901 	sbc.w	r9, r3, r1
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001548:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800154c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001550:	4690      	mov	r8, r2
 8001552:	4699      	mov	r9, r3
 8001554:	4623      	mov	r3, r4
 8001556:	eb18 0303 	adds.w	r3, r8, r3
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	462b      	mov	r3, r5
 800155e:	eb49 0303 	adc.w	r3, r9, r3
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001570:	4629      	mov	r1, r5
 8001572:	024b      	lsls	r3, r1, #9
 8001574:	4621      	mov	r1, r4
 8001576:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800157a:	4621      	mov	r1, r4
 800157c:	024a      	lsls	r2, r1, #9
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001586:	2200      	movs	r2, #0
 8001588:	65bb      	str	r3, [r7, #88]	; 0x58
 800158a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800158c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001590:	f7fe fe38 	bl	8000204 <__aeabi_uldivmod>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4613      	mov	r3, r2
 800159a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800159e:	e065      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x420>
 80015a0:	40023800 	.word	0x40023800
 80015a4:	00f42400 	.word	0x00f42400
 80015a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ac:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	2200      	movs	r2, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	4611      	mov	r1, r2
 80015b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80015bc:	653b      	str	r3, [r7, #80]	; 0x50
 80015be:	2300      	movs	r3, #0
 80015c0:	657b      	str	r3, [r7, #84]	; 0x54
 80015c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80015c6:	4642      	mov	r2, r8
 80015c8:	464b      	mov	r3, r9
 80015ca:	f04f 0000 	mov.w	r0, #0
 80015ce:	f04f 0100 	mov.w	r1, #0
 80015d2:	0159      	lsls	r1, r3, #5
 80015d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d8:	0150      	lsls	r0, r2, #5
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4641      	mov	r1, r8
 80015e0:	1a51      	subs	r1, r2, r1
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	4649      	mov	r1, r9
 80015e6:	eb63 0301 	sbc.w	r3, r3, r1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80015f8:	4659      	mov	r1, fp
 80015fa:	018b      	lsls	r3, r1, #6
 80015fc:	4651      	mov	r1, sl
 80015fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001602:	4651      	mov	r1, sl
 8001604:	018a      	lsls	r2, r1, #6
 8001606:	4651      	mov	r1, sl
 8001608:	1a54      	subs	r4, r2, r1
 800160a:	4659      	mov	r1, fp
 800160c:	eb63 0501 	sbc.w	r5, r3, r1
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	00eb      	lsls	r3, r5, #3
 800161a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800161e:	00e2      	lsls	r2, r4, #3
 8001620:	4614      	mov	r4, r2
 8001622:	461d      	mov	r5, r3
 8001624:	4643      	mov	r3, r8
 8001626:	18e3      	adds	r3, r4, r3
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	464b      	mov	r3, r9
 800162c:	eb45 0303 	adc.w	r3, r5, r3
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800163e:	4629      	mov	r1, r5
 8001640:	028b      	lsls	r3, r1, #10
 8001642:	4621      	mov	r1, r4
 8001644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001648:	4621      	mov	r1, r4
 800164a:	028a      	lsls	r2, r1, #10
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001654:	2200      	movs	r2, #0
 8001656:	64bb      	str	r3, [r7, #72]	; 0x48
 8001658:	64fa      	str	r2, [r7, #76]	; 0x4c
 800165a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800165e:	f7fe fdd1 	bl	8000204 <__aeabi_uldivmod>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4613      	mov	r3, r2
 8001668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	0f1b      	lsrs	r3, r3, #28
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800167a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800167e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800168a:	e003      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800168e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001692:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001694:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001698:	4618      	mov	r0, r3
 800169a:	37b8      	adds	r7, #184	; 0xb8
 800169c:	46bd      	mov	sp, r7
 800169e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	00f42400 	.word	0x00f42400

080016ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e28d      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8083 	beq.w	80017d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016cc:	4b94      	ldr	r3, [pc, #592]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d019      	beq.n	800170c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016d8:	4b91      	ldr	r3, [pc, #580]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d106      	bne.n	80016f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016e4:	4b8e      	ldr	r3, [pc, #568]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016f0:	d00c      	beq.n	800170c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f2:	4b8b      	ldr	r3, [pc, #556]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d112      	bne.n	8001724 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fe:	4b88      	ldr	r3, [pc, #544]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800170a:	d10b      	bne.n	8001724 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	4b84      	ldr	r3, [pc, #528]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d05b      	beq.n	80017d0 <HAL_RCC_OscConfig+0x124>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d157      	bne.n	80017d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e25a      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172c:	d106      	bne.n	800173c <HAL_RCC_OscConfig+0x90>
 800172e:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7b      	ldr	r2, [pc, #492]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e01d      	b.n	8001778 <HAL_RCC_OscConfig+0xcc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0xb4>
 8001746:	4b76      	ldr	r3, [pc, #472]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a75      	ldr	r2, [pc, #468]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800174c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b73      	ldr	r3, [pc, #460]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a72      	ldr	r2, [pc, #456]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0xcc>
 8001760:	4b6f      	ldr	r3, [pc, #444]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a6e      	ldr	r2, [pc, #440]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b6c      	ldr	r3, [pc, #432]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6b      	ldr	r2, [pc, #428]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d013      	beq.n	80017a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff f9d4 	bl	8000b2c <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff f9d0 	bl	8000b2c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e21f      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	4b61      	ldr	r3, [pc, #388]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0xdc>
 80017a6:	e014      	b.n	80017d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff f9c0 	bl	8000b2c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff f9bc 	bl	8000b2c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e20b      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	4b57      	ldr	r3, [pc, #348]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x104>
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d06f      	beq.n	80018be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017de:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d017      	beq.n	800181a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017ea:	4b4d      	ldr	r3, [pc, #308]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d105      	bne.n	8001802 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017f6:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d11c      	bne.n	8001848 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180e:	4b44      	ldr	r3, [pc, #272]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <HAL_RCC_OscConfig+0x186>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d001      	beq.n	8001832 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e1d3      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4937      	ldr	r1, [pc, #220]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	e03a      	b.n	80018be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001850:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_OscConfig+0x278>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff f969 	bl	8000b2c <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800185e:	f7ff f965 	bl	8000b2c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e1b4      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4925      	ldr	r1, [pc, #148]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x278>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f948 	bl	8000b2c <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff f944 	bl	8000b2c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e193      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d036      	beq.n	8001938 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d016      	beq.n	8001900 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_RCC_OscConfig+0x27c>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff f928 	bl	8000b2c <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff f924 	bl	8000b2c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e173      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80018f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x234>
 80018fe:	e01b      	b.n	8001938 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff f911 	bl	8000b2c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	e00e      	b.n	800192c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190e:	f7ff f90d 	bl	8000b2c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d907      	bls.n	800192c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e15c      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
 8001920:	40023800 	.word	0x40023800
 8001924:	42470000 	.word	0x42470000
 8001928:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	4b8a      	ldr	r3, [pc, #552]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 800192e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1ea      	bne.n	800190e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8097 	beq.w	8001a74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194a:	4b83      	ldr	r3, [pc, #524]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10f      	bne.n	8001976 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4b7f      	ldr	r3, [pc, #508]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a7e      	ldr	r2, [pc, #504]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b7c      	ldr	r3, [pc, #496]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001972:	2301      	movs	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b79      	ldr	r3, [pc, #484]	; (8001b5c <HAL_RCC_OscConfig+0x4b0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d118      	bne.n	80019b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001982:	4b76      	ldr	r3, [pc, #472]	; (8001b5c <HAL_RCC_OscConfig+0x4b0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a75      	ldr	r2, [pc, #468]	; (8001b5c <HAL_RCC_OscConfig+0x4b0>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198e:	f7ff f8cd 	bl	8000b2c <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001996:	f7ff f8c9 	bl	8000b2c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e118      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4b6c      	ldr	r3, [pc, #432]	; (8001b5c <HAL_RCC_OscConfig+0x4b0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x31e>
 80019bc:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a65      	ldr	r2, [pc, #404]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
 80019c8:	e01c      	b.n	8001a04 <HAL_RCC_OscConfig+0x358>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x340>
 80019d2:	4b61      	ldr	r3, [pc, #388]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a60      	ldr	r2, [pc, #384]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
 80019de:	4b5e      	ldr	r3, [pc, #376]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a5d      	ldr	r2, [pc, #372]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ea:	e00b      	b.n	8001a04 <HAL_RCC_OscConfig+0x358>
 80019ec:	4b5a      	ldr	r3, [pc, #360]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	4a59      	ldr	r2, [pc, #356]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	6713      	str	r3, [r2, #112]	; 0x70
 80019f8:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fc:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	f023 0304 	bic.w	r3, r3, #4
 8001a02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d015      	beq.n	8001a38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7ff f88e 	bl	8000b2c <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f7ff f88a 	bl	8000b2c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e0d7      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2a:	4b4b      	ldr	r3, [pc, #300]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0ee      	beq.n	8001a14 <HAL_RCC_OscConfig+0x368>
 8001a36:	e014      	b.n	8001a62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff f878 	bl	8000b2c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff f874 	bl	8000b2c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0c1      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a56:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1ee      	bne.n	8001a40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d105      	bne.n	8001a74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a68:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	4a3a      	ldr	r2, [pc, #232]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80ad 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a7e:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d060      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d145      	bne.n	8001b1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <HAL_RCC_OscConfig+0x4b4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f848 	bl	8000b2c <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff f844 	bl	8000b2c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e093      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69da      	ldr	r2, [r3, #28]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	019b      	lsls	r3, r3, #6
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	085b      	lsrs	r3, r3, #1
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	071b      	lsls	r3, r3, #28
 8001aea:	491b      	ldr	r1, [pc, #108]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x4b4>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f819 	bl	8000b2c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff f815 	bl	8000b2c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e064      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x452>
 8001b1c:	e05c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_RCC_OscConfig+0x4b4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f802 	bl	8000b2c <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7fe fffe 	bl	8000b2c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e04d      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x480>
 8001b4a:	e045      	b.n	8001bd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e040      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <HAL_RCC_OscConfig+0x538>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d030      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d129      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d122      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b94:	4013      	ands	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d119      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	085b      	lsrs	r3, r3, #1
 8001bac:	3b01      	subs	r3, #1
 8001bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e041      	b.n	8001c7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe fe64 	bl	80008dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 f9b8 	bl	8001f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_TIM_PWM_Start+0x24>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	bf14      	ite	ne
 8001ca4:	2301      	movne	r3, #1
 8001ca6:	2300      	moveq	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	e022      	b.n	8001cf2 <HAL_TIM_PWM_Start+0x6a>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d109      	bne.n	8001cc6 <HAL_TIM_PWM_Start+0x3e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	bf14      	ite	ne
 8001cbe:	2301      	movne	r3, #1
 8001cc0:	2300      	moveq	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	e015      	b.n	8001cf2 <HAL_TIM_PWM_Start+0x6a>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d109      	bne.n	8001ce0 <HAL_TIM_PWM_Start+0x58>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	bf14      	ite	ne
 8001cd8:	2301      	movne	r3, #1
 8001cda:	2300      	moveq	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	e008      	b.n	8001cf2 <HAL_TIM_PWM_Start+0x6a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e07c      	b.n	8001df4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d104      	bne.n	8001d0a <HAL_TIM_PWM_Start+0x82>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d08:	e013      	b.n	8001d32 <HAL_TIM_PWM_Start+0xaa>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d104      	bne.n	8001d1a <HAL_TIM_PWM_Start+0x92>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d18:	e00b      	b.n	8001d32 <HAL_TIM_PWM_Start+0xaa>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d104      	bne.n	8001d2a <HAL_TIM_PWM_Start+0xa2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d28:	e003      	b.n	8001d32 <HAL_TIM_PWM_Start+0xaa>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2201      	movs	r2, #1
 8001d38:	6839      	ldr	r1, [r7, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 fb7e 	bl	800243c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a2d      	ldr	r2, [pc, #180]	; (8001dfc <HAL_TIM_PWM_Start+0x174>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_TIM_PWM_Start+0xcc>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a2c      	ldr	r2, [pc, #176]	; (8001e00 <HAL_TIM_PWM_Start+0x178>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d101      	bne.n	8001d58 <HAL_TIM_PWM_Start+0xd0>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_TIM_PWM_Start+0xd2>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <HAL_TIM_PWM_Start+0x174>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d022      	beq.n	8001dbe <HAL_TIM_PWM_Start+0x136>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d80:	d01d      	beq.n	8001dbe <HAL_TIM_PWM_Start+0x136>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <HAL_TIM_PWM_Start+0x17c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d018      	beq.n	8001dbe <HAL_TIM_PWM_Start+0x136>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <HAL_TIM_PWM_Start+0x180>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <HAL_TIM_PWM_Start+0x136>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_TIM_PWM_Start+0x184>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00e      	beq.n	8001dbe <HAL_TIM_PWM_Start+0x136>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a16      	ldr	r2, [pc, #88]	; (8001e00 <HAL_TIM_PWM_Start+0x178>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d009      	beq.n	8001dbe <HAL_TIM_PWM_Start+0x136>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <HAL_TIM_PWM_Start+0x188>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d004      	beq.n	8001dbe <HAL_TIM_PWM_Start+0x136>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <HAL_TIM_PWM_Start+0x18c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d111      	bne.n	8001de2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b06      	cmp	r3, #6
 8001dce:	d010      	beq.n	8001df2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de0:	e007      	b.n	8001df2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0201 	orr.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40010400 	.word	0x40010400
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40000800 	.word	0x40000800
 8001e0c:	40000c00 	.word	0x40000c00
 8001e10:	40014000 	.word	0x40014000
 8001e14:	40001800 	.word	0x40001800

08001e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e0ae      	b.n	8001f94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	f200 809f 	bhi.w	8001f84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001e81 	.word	0x08001e81
 8001e50:	08001f85 	.word	0x08001f85
 8001e54:	08001f85 	.word	0x08001f85
 8001e58:	08001f85 	.word	0x08001f85
 8001e5c:	08001ec1 	.word	0x08001ec1
 8001e60:	08001f85 	.word	0x08001f85
 8001e64:	08001f85 	.word	0x08001f85
 8001e68:	08001f85 	.word	0x08001f85
 8001e6c:	08001f03 	.word	0x08001f03
 8001e70:	08001f85 	.word	0x08001f85
 8001e74:	08001f85 	.word	0x08001f85
 8001e78:	08001f85 	.word	0x08001f85
 8001e7c:	08001f43 	.word	0x08001f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f928 	bl	80020dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0208 	orr.w	r2, r2, #8
 8001e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0204 	bic.w	r2, r2, #4
 8001eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6999      	ldr	r1, [r3, #24]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	619a      	str	r2, [r3, #24]
      break;
 8001ebe:	e064      	b.n	8001f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f978 	bl	80021bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6999      	ldr	r1, [r3, #24]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	021a      	lsls	r2, r3, #8
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	619a      	str	r2, [r3, #24]
      break;
 8001f00:	e043      	b.n	8001f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68b9      	ldr	r1, [r7, #8]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f9cd 	bl	80022a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0208 	orr.w	r2, r2, #8
 8001f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69da      	ldr	r2, [r3, #28]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0204 	bic.w	r2, r2, #4
 8001f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69d9      	ldr	r1, [r3, #28]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	61da      	str	r2, [r3, #28]
      break;
 8001f40:	e023      	b.n	8001f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 fa21 	bl	8002390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69d9      	ldr	r1, [r3, #28]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	021a      	lsls	r2, r3, #8
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	61da      	str	r2, [r3, #28]
      break;
 8001f82:	e002      	b.n	8001f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	75fb      	strb	r3, [r7, #23]
      break;
 8001f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a40      	ldr	r2, [pc, #256]	; (80020b0 <TIM_Base_SetConfig+0x114>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d013      	beq.n	8001fdc <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fba:	d00f      	beq.n	8001fdc <TIM_Base_SetConfig+0x40>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3d      	ldr	r2, [pc, #244]	; (80020b4 <TIM_Base_SetConfig+0x118>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00b      	beq.n	8001fdc <TIM_Base_SetConfig+0x40>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3c      	ldr	r2, [pc, #240]	; (80020b8 <TIM_Base_SetConfig+0x11c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d007      	beq.n	8001fdc <TIM_Base_SetConfig+0x40>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a3b      	ldr	r2, [pc, #236]	; (80020bc <TIM_Base_SetConfig+0x120>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d003      	beq.n	8001fdc <TIM_Base_SetConfig+0x40>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3a      	ldr	r2, [pc, #232]	; (80020c0 <TIM_Base_SetConfig+0x124>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d108      	bne.n	8001fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a2f      	ldr	r2, [pc, #188]	; (80020b0 <TIM_Base_SetConfig+0x114>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d02b      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffc:	d027      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a2c      	ldr	r2, [pc, #176]	; (80020b4 <TIM_Base_SetConfig+0x118>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d023      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a2b      	ldr	r2, [pc, #172]	; (80020b8 <TIM_Base_SetConfig+0x11c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d01f      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a2a      	ldr	r2, [pc, #168]	; (80020bc <TIM_Base_SetConfig+0x120>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01b      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a29      	ldr	r2, [pc, #164]	; (80020c0 <TIM_Base_SetConfig+0x124>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d017      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a28      	ldr	r2, [pc, #160]	; (80020c4 <TIM_Base_SetConfig+0x128>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <TIM_Base_SetConfig+0x12c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00f      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a26      	ldr	r2, [pc, #152]	; (80020cc <TIM_Base_SetConfig+0x130>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00b      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a25      	ldr	r2, [pc, #148]	; (80020d0 <TIM_Base_SetConfig+0x134>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <TIM_Base_SetConfig+0x138>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d003      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <TIM_Base_SetConfig+0x13c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d108      	bne.n	8002060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <TIM_Base_SetConfig+0x114>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d003      	beq.n	8002094 <TIM_Base_SetConfig+0xf8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <TIM_Base_SetConfig+0x124>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d103      	bne.n	800209c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	615a      	str	r2, [r3, #20]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40000c00 	.word	0x40000c00
 80020c0:	40010400 	.word	0x40010400
 80020c4:	40014000 	.word	0x40014000
 80020c8:	40014400 	.word	0x40014400
 80020cc:	40014800 	.word	0x40014800
 80020d0:	40001800 	.word	0x40001800
 80020d4:	40001c00 	.word	0x40001c00
 80020d8:	40002000 	.word	0x40002000

080020dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	f023 0201 	bic.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f023 0302 	bic.w	r3, r3, #2
 8002124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a20      	ldr	r2, [pc, #128]	; (80021b4 <TIM_OC1_SetConfig+0xd8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_OC1_SetConfig+0x64>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <TIM_OC1_SetConfig+0xdc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d10c      	bne.n	800215a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f023 0308 	bic.w	r3, r3, #8
 8002146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f023 0304 	bic.w	r3, r3, #4
 8002158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a15      	ldr	r2, [pc, #84]	; (80021b4 <TIM_OC1_SetConfig+0xd8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d003      	beq.n	800216a <TIM_OC1_SetConfig+0x8e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <TIM_OC1_SetConfig+0xdc>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d111      	bne.n	800218e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	621a      	str	r2, [r3, #32]
}
 80021a8:	bf00      	nop
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	40010000 	.word	0x40010000
 80021b8:	40010400 	.word	0x40010400

080021bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f023 0210 	bic.w	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f023 0320 	bic.w	r3, r3, #32
 8002206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <TIM_OC2_SetConfig+0xe4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d003      	beq.n	8002224 <TIM_OC2_SetConfig+0x68>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <TIM_OC2_SetConfig+0xe8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10d      	bne.n	8002240 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800222a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800223e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a17      	ldr	r2, [pc, #92]	; (80022a0 <TIM_OC2_SetConfig+0xe4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d003      	beq.n	8002250 <TIM_OC2_SetConfig+0x94>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <TIM_OC2_SetConfig+0xe8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d113      	bne.n	8002278 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800225e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	621a      	str	r2, [r3, #32]
}
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40010000 	.word	0x40010000
 80022a4:	40010400 	.word	0x40010400

080022a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0303 	bic.w	r3, r3, #3
 80022de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a21      	ldr	r2, [pc, #132]	; (8002388 <TIM_OC3_SetConfig+0xe0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d003      	beq.n	800230e <TIM_OC3_SetConfig+0x66>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a20      	ldr	r2, [pc, #128]	; (800238c <TIM_OC3_SetConfig+0xe4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10d      	bne.n	800232a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	4313      	orrs	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a16      	ldr	r2, [pc, #88]	; (8002388 <TIM_OC3_SetConfig+0xe0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d003      	beq.n	800233a <TIM_OC3_SetConfig+0x92>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a15      	ldr	r2, [pc, #84]	; (800238c <TIM_OC3_SetConfig+0xe4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d113      	bne.n	8002362 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	621a      	str	r2, [r3, #32]
}
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40010000 	.word	0x40010000
 800238c:	40010400 	.word	0x40010400

08002390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	031b      	lsls	r3, r3, #12
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <TIM_OC4_SetConfig+0xa4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d003      	beq.n	80023f8 <TIM_OC4_SetConfig+0x68>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a11      	ldr	r2, [pc, #68]	; (8002438 <TIM_OC4_SetConfig+0xa8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d109      	bne.n	800240c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	019b      	lsls	r3, r3, #6
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	621a      	str	r2, [r3, #32]
}
 8002426:	bf00      	nop
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40010000 	.word	0x40010000
 8002438:	40010400 	.word	0x40010400

0800243c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2201      	movs	r2, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a1a      	ldr	r2, [r3, #32]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	43db      	mvns	r3, r3
 800245e:	401a      	ands	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a1a      	ldr	r2, [r3, #32]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	431a      	orrs	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	621a      	str	r2, [r3, #32]
}
 800247a:	bf00      	nop
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800249c:	2302      	movs	r3, #2
 800249e:	e05a      	b.n	8002556 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a21      	ldr	r2, [pc, #132]	; (8002564 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d022      	beq.n	800252a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ec:	d01d      	beq.n	800252a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d018      	beq.n	800252a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1b      	ldr	r2, [pc, #108]	; (800256c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d00e      	beq.n	800252a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a18      	ldr	r2, [pc, #96]	; (8002574 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d009      	beq.n	800252a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a17      	ldr	r2, [pc, #92]	; (8002578 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d004      	beq.n	800252a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a15      	ldr	r2, [pc, #84]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10c      	bne.n	8002544 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	4313      	orrs	r3, r2
 800253a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40010000 	.word	0x40010000
 8002568:	40000400 	.word	0x40000400
 800256c:	40000800 	.word	0x40000800
 8002570:	40000c00 	.word	0x40000c00
 8002574:	40010400 	.word	0x40010400
 8002578:	40014000 	.word	0x40014000
 800257c:	40001800 	.word	0x40001800

08002580 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002598:	2302      	movs	r3, #2
 800259a:	e03d      	b.n	8002618 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <__libc_init_array>:
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	4d0d      	ldr	r5, [pc, #52]	; (800265c <__libc_init_array+0x38>)
 8002628:	4c0d      	ldr	r4, [pc, #52]	; (8002660 <__libc_init_array+0x3c>)
 800262a:	1b64      	subs	r4, r4, r5
 800262c:	10a4      	asrs	r4, r4, #2
 800262e:	2600      	movs	r6, #0
 8002630:	42a6      	cmp	r6, r4
 8002632:	d109      	bne.n	8002648 <__libc_init_array+0x24>
 8002634:	4d0b      	ldr	r5, [pc, #44]	; (8002664 <__libc_init_array+0x40>)
 8002636:	4c0c      	ldr	r4, [pc, #48]	; (8002668 <__libc_init_array+0x44>)
 8002638:	f000 f820 	bl	800267c <_init>
 800263c:	1b64      	subs	r4, r4, r5
 800263e:	10a4      	asrs	r4, r4, #2
 8002640:	2600      	movs	r6, #0
 8002642:	42a6      	cmp	r6, r4
 8002644:	d105      	bne.n	8002652 <__libc_init_array+0x2e>
 8002646:	bd70      	pop	{r4, r5, r6, pc}
 8002648:	f855 3b04 	ldr.w	r3, [r5], #4
 800264c:	4798      	blx	r3
 800264e:	3601      	adds	r6, #1
 8002650:	e7ee      	b.n	8002630 <__libc_init_array+0xc>
 8002652:	f855 3b04 	ldr.w	r3, [r5], #4
 8002656:	4798      	blx	r3
 8002658:	3601      	adds	r6, #1
 800265a:	e7f2      	b.n	8002642 <__libc_init_array+0x1e>
 800265c:	080026ac 	.word	0x080026ac
 8002660:	080026ac 	.word	0x080026ac
 8002664:	080026ac 	.word	0x080026ac
 8002668:	080026b0 	.word	0x080026b0

0800266c <memset>:
 800266c:	4402      	add	r2, r0
 800266e:	4603      	mov	r3, r0
 8002670:	4293      	cmp	r3, r2
 8002672:	d100      	bne.n	8002676 <memset+0xa>
 8002674:	4770      	bx	lr
 8002676:	f803 1b01 	strb.w	r1, [r3], #1
 800267a:	e7f9      	b.n	8002670 <memset+0x4>

0800267c <_init>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	bf00      	nop
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr

08002688 <_fini>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	bf00      	nop
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr
